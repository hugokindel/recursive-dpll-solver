                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 29 octobre 2021, 23h59

Identité
--------
Nombre de binôme: 10
Nom, prénom 1: Kindel, Hugo
Nom, prénom 2: Jauroyon, Maxime


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

**à remplir**

Comme voulu, `make dpll` s'exécute sans erreurs ou warnings.
`./dpll sudoku-4x4.cnf` donne la réponse suivante:
`SAT
-111 -112 113 -114 -121 -122 -123 124 -131 132 -133 -134 141 -142 -143 -144 -211 212 -213 -214 221 -222 -223 -224 -231 -232 -233 234 -241 -242 243 -244 311 -312 -313 -314 -321 322 -323 -324 -331 -332 333 -334 -341 -342 -343 344 -411 -412 -413 414 -421 -422 423 -424 431 -432 -433 -434 -441 442 -443 -444 0`.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

**à remplir**

Oui, nous l'utilisons plusieurs fois.
Tout d'abord, elle est utilisée pour supprimer les clauses qui contiennent le littéral `i` (les clauses qui sont vrais).
Ensuite, elle est utilisée pour supprimer l'inverse du littéral `i` dans les clauses qui le contienne.
Finalement, elle est aussi utiliser pour effectuer des inversions de l'ordre des clauses et des littéraux étant donné que la fonction `filter_map` inverse le sens.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

**à remplir**

Nous avons créé une première fonction utilitaire `is_unit` qui retourne vrai si une clause est unitaire sinon faux.
Ensuite, une seconde fonction utilitaire `search_unit` qui retourne la première clause unitaire trouvé dans une liste de clauses `ll` passé en argument ou retourne une exception si aucune clause unitaire n'est trouvé, en intermédiaire `List.hd` est utilisé pour obtenir une tête de liste.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

**à remplir**

Tout d'abord, la fonction `List.concat` est utilisé pour obtenir une liste de littéraux à partir d'une liste de clause en concaténant les littéraux de chaque clauses (`List.union_sorted` aurait pu être utilisé pour gagner en rapidité et éviter les répétitions mais présenterait un risque de débordement de pile).
Nous créons ensuite une fonction `is_pur` pour vérifier si un littéral est pur. De manière plus technique, elle vérifie si l'inverse d'un littéral donné `x` est présent ou non dans une liste donné `l` pour en déduire la pureté.
Finalement, nous avons aussi créé `list_parcour` qui retourne un littéral pur si il en existe un et lève une exception dans le cas contraire. On l'utilise en vérifiant pour tous les littéraux si il est un littéral pur en le comparant avec la liste initiale (qui ne change jamais)

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

**à remplir**

Nous pouvons prendre l'exemple `exemple_7_2` donné en tant que clause de test au début du fichier.
Les 2 formules trouvent que la formule est satisfiable mais elles donnent pas la même interpretation:
L'exécution de `solveur_split` donne 1 vrai suivie de -2 (premier littéral que l'on croise) et trouve que la liste des clauses est vide alors que l'exécution de `solveur_dpll_rec` donne -2 (clause unitaire) suivi de -3 en littéral pur et trouve que la liste des clauses est vide.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**

Nous avons modifié le `main` (`let () = ...`) pour qu'il ne retourne pas d'exception lorsque le programme `dpll` est exécuté sans passer d'arguments.

---

--fin du fichier RENDU--